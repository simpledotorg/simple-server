#!/usr/bin/env bash

# Run crontab process in background, mainly for log archival
/usr/sbin/cron -f &

# Create config
echo $CPHC_VPN_CONFIG > linux_phat_client/linux_phat_client/naclient.cfg

# Setup tun device
mkdir -p /dev/net 
mknod /dev/net/tun c 10 200 
chmod 600 /dev/net/tun

# Install
cd linux_phat_client
./install_linux_phat_client.sh
cd ../

# VPN login
vpn_login () {
  yes | naclient login -profile $CPHC_VPN_PROFILE  -user $CPHC_VPN_USER  -password $CPHC_VPN_PASSWORD
}
vpn_login

# Monitor VPN connection
ALERT_MIN_FAILURES=2
ALERT_FREQUENCY_SECONDS=300
ALERT_STATUS_POLLING_INTERVAL=5
ALERT_MESSAGE="Unable to connect CPHC VPN"
CONSECUTIVE_FAILURES=0
LAST_ALERT_TIME=0
STATUS_LOG_PATH="/home/app/log/vpn_client_status.log"

slack_alert () {
  curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$1\"}" $CPHC_VPN_ALERTS_WEBHOOK_URL
}

echo_with_time () {
  echo "$(date '+TIME:%H:%M:%S') $1" | tee -a $STATUS_LOG_PATH
}

monitor () {
  while true; do
    naclient status
    if [ $? -eq 1 ]; then
      echo_with_time "VPN is connected"
    else
      CONSECUTIVE_FAILURES=$((CONSECUTIVE_FAILURES + 1))
      vpn_login
      if [ $? -eq 1 ]; then
        echo_with_time "Successfully connected to VPN"
        CONSECUTIVE_FAILURES=0
        LAST_ALERT_TIME=0
      elif [ $CONSECUTIVE_FAILURES -gt $ALERT_MIN_FAILURES ] && [ $(($(date +%s) - $LAST_ALERT_TIME)) -ge $((ALERT_FREQUENCY_SECONDS)) ]; then
        echo_with_time "$ALERT_MESSAGE" && slack_alert "$ALERT_MESSAGE"
        LAST_ALERT_TIME=$(date +%s)
      fi
    fi
    sleep $ALERT_STATUS_POLLING_INTERVAL
  done
}
monitor &

# Start sikdekiq
bundle exec sidekiq -q $CPHC_SIDEKIQ_QUEUE -e production 
