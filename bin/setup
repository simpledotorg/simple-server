#!/usr/bin/env bash
set -euo pipefail

{
  RUBY_VERSION=$(cat .ruby-version)
} > /dev/null 2>&1

BUNDLER_VERSION=2.3.22

init (){
  verify_ruby_version && verify_node_version
  verify_bundled_gems && verify_yarn_packages
  verify_foreman
  verify_postgres && verify_database_migrations &&
  cleanup_database

  configure_parallel_testing
}

## utility functions for dependencies
is_darwin (){
  PLATFORM=$(uname)
  [ "$PLATFORM" == "Darwin" ]
}

has_homebrew (){
  echo 'Checking for homebrew'
  is_darwin && hash brew >/dev/null 2>&1
}

verify_homebrew (){
  echo 'Verifying Homebrew installed'
  if ! has_homebrew
  then
    echo 'Homebrew is not installed'
    is_darwin && echo 'Please install homebrew. https://brew.sh'
    exit 1
  fi
}

has_postgres (){
  hash psql >/dev/null 2>&1
}

pg_running (){
  echo 'Checking that postgres is running...'
  ps aux | grep [p]ostgres > /dev/null 2>&1
}

has_rbenv (){
  hash rbenv >/dev/null 2>&1
}

update_rbenv () {
  brew update
  brew upgrade ruby-build
}

rbenv_install_ruby_version (){
  rbenv install $RUBY_VERSION
  rbenv local $RUBY_VERSION
}

has_ruby_version (){
  INSTALLED_RUBY_VERSION=$(ruby -e 'puts RUBY_VERSION')
  [ "$INSTALLED_RUBY_VERSION" == "$RUBY_VERSION" ]
}

install_ruby_version (){
  verify_homebrew

  has_rbenv || {
    echo 'Please install rbenv (https://github.com/rbenv/rbenv) to manage your ruby versions.'
    exit 1
  }

  update_rbenv
  rbenv_install_ruby_version
}

verify_postgres (){
  has_postgres || {
    echo 'Please install postgresql.'
    exit 1
  }

  pg_running || {
   echo 'Please ensure postgresql is running'
   exit 1
  }
}

verify_ruby_version (){
  echo 'Checking for ruby version'
  has_ruby_version || install_ruby_version
}

verify_node_version (){
  echo 'Checking for node version'
  has_node_version || install_nodejs
}

verify_bundled_gems (){
  echo 'Updating gems...'
  {
    (gem list -i -v ${BUNDLER_VERSION} bundler || gem install bundler -v ${BUNDLER_VERSION}) && bundle _${BUNDLER_VERSION}_ install --binstubs=./bundle/bin
  } 2>&1
}

has_node_version (){
  INSTALLED_NODE_VERSION=$(node -v)
  [ "$INSTALLED_NODE_VERSION" == "v18.11.0" ]
}

install_nodejs (){
  is_darwin || {
    echo "Please install node for your platform."
    exit 1
  }

  echo 'Installing NodeJS...'
  brew install nvm

  # nvm is a bash function and not an executable, so it needs to be sourced
  source $(brew --prefix nvm)/nvm.sh
  nvm install 18.11.0
  node -v
}

verify_yarn_packages (){
  echo 'Updating Yarn packages...'

  bundle exec yarn install 2>&1
}

verify_foreman(){
  echo 'Installing foreman...'
  gem list -i foreman || gem install foreman
}

verify_database_migrations (){
  echo 'Setting up database...'
  migrate_existing_database || setup_database
}

migrate_existing_database (){
  bundle exec rails db:migrate 2>/dev/null
}

setup_database (){
  bundle exec rails db:setup ||
  echo 'Unable to create the databases for you.
Please ensure your database.yml is configured for your system and try again.'
}

cleanup_database (){
  echo "Cleaning up previous db setup..."
  rails db:drop
}

configure_parallel_testing (){
  echo 'Configuring parallel testing...'
  rake parallel:setup
}

init
