class GetBsnlTemplateDetails
  include I18n::Backend::Flatten
  include Memery
  DUPLICATE_TEMPLATES = {
    "notifications.set03_basic_repeated.first" => "notifications.set03.basic",
    "notifications.set03_basic_repeated.second" => "notifications.set03.basic",
    "notifications.set03_basic_repeated.third" => "notifications.set03.basic"
  }

  attr_reader :template_details, :template_names

  def initialize
    @template_details = Messaging::Bsnl::Api.new.get_template_details
    @template_names = @template_details.map { |detail| detail["Template_Name"] }
  end

  def call
    validate_templates
    print_summary
    write_config_to_file
  end

  def pending_templates
    print_summary(list_pending: true)
    validate_templates
  end

  def validate_templates
    validate_template_names
    validate_statuses
  end

  def write_config_to_file
    config_file = "config/data/bsnl_templates.yml"
    config = template_details.to_h do |template|
      template_name = template["Template_Name"]
      [
        template_name,
        template.slice(
          "Template_Id", "Template_Keys",
          "Non_Variable_Text_Length", "Max_Length_Permitted",
          "Template_Status", "Is_Unicode"
        )
      ]
    end
    add_version_info!(config)
    insert_duplicate_templates!(config)

    info "Added latest templates list to #{config_file}."
    info "Changes to this file (if any) should be committed to simple-server."

    File.open(config_file, "w") do |file|
      file.write("# This is an autogenerated file. Do not modify.\n")
      file.write("# Use get_bsnl_templates.rake to fetch a new copy of this file.\n")
      file.write(config.sort_by(&:first).to_h.to_yaml)
    end
  end

  def print_summary(list_pending: false)
    uploaded_templates = []
    remaining_templates = []

    summary = locale_keys_by_language.map do |language, locale_keys|
      uploaded_for_language = 0
      locale_keys.each do |locale_key|
        if template_names.include?(locale_key)
          uploaded_templates << locale_key
          uploaded_for_language += 1
        else
          remaining_templates << locale_key
        end
      end

      {language: language,
       uploaded_count: uploaded_for_language,
       total_count: locale_keys.count}
    end

    info "✔ Found #{uploaded_templates.count}/#{locale_keys_by_language.values.flatten.count} templates on BSNL:"
    puts_list(summary.sort_by { |item| item[:uploaded_count] }.reverse.map do |item|
      "#{item[:uploaded_count]}/#{item[:total_count]} uploaded from #{item[:language]}"
    end)

    if list_pending
      info "✔ These messages have been uploaded to BSNL:"
      puts_list uploaded_templates.sort

      error "˟ These messages have not been uploaded to BSNL:"
      puts_list remaining_templates.sort
    end
  end

  def locale_keys_by_language
    Dir.glob("config/locales/notifications/*").to_h do |file_name|
      [file_name, flatten_translations(nil, YAML.safe_load(File.open(file_name)), nil, false).keys.map(&:to_s)]
    end
  end

  private

  def error(message)
    puts message.red
  end

  def warning(message)
    puts message.yellow
  end

  def info(message)
    puts message.green
  end

  def puts_list(array)
    puts array.to_yaml.delete_prefix("---\n")
  end

  def add_version_info!(config)
    config.each do |template_name, template_details|
      template_details["Version"] = Messaging::Bsnl::DltTemplate.version_number(template_name)
    end

    add_latest_version_name!(config)
  end

  def add_latest_version_name!(config)
    latest_versions = Hash.new(0)
    latest_version_names = {}

    config.each do |name, details|
      version = details["Version"]
      name_without_version = Messaging::Bsnl::DltTemplate.drop_version_number(template_name)

      if version > latest_versions[name_without_version]
        latest_versions[name_without_version] = version
        latest_version_names[name_without_version] = name
      end
    end

    config.values.each do |template|
      name_without_version = Messaging::Bsnl::DltTemplate.drop_version_number(template_name)
      template["Is_Latest_Version"] = (template["Version"] == latest_versions[name_without_version])
      template["Latest_Template_Version"] = latest_version_names[name_without_version]
    end
  end


  def insert_duplicate_templates!(config)
    DUPLICATE_TEMPLATES.each do |duplicate_template_name, original_template_name|
      matching_templates = config.select { |template_name, template_details| k.match?(original_template_name) && template_name["Is_Latest_Version"] }

      matching_templates.each do |template_name, details|
        locale_name = template_name.split(".").first
        config.merge!("#{locale_name}.#{duplicate_template_name}" => details)
      end
    end
  end

  def validate_template_names
    invalid_names = template_names.reject { |template_name| locale_keys_by_language.values.flatten.include?(template_name) }

    if invalid_names.any?
      error "⚠️  These templates are not in the notifications locale files but have been uploaded on DLT:"
      puts_list invalid_names
    end
  end

  def validate_statuses
    templates_pending_naming = template_details.select { |template_details| template_details["Template_Status"] == "0" }

    if templates_pending_naming.any?
      error "⚠️  These templates need to be named on the BSNL dashboard:"
      puts_list templates_pending_naming.map { |template_detail| template_detail["Template_Name"] }
    end
  end
end
