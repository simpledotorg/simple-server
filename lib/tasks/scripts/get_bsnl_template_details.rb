class GetBsnlTemplateDetails
  include I18n::Backend::Flatten
  include Memery
  CONFIG_FILE = "config/data/bsnl_templates.yml"
  attr_reader :template_details, :template_names

  def initialize
    @template_details = Messaging::Bsnl::Api.new.get_template_details
    @template_names = @template_details.map { |template_detail| template_detail["Template_Name"] }
  end

  def write_to_config
    show_templates_pending_naming
    File.open(CONFIG_FILE, "w") do |file|
      file.write("# This is an autogenerated file. Do not modify.\n")
      file.write("# Use get_bsnl_templates.rake to fetch a new copy of this file.\n")
      file.write(massaged_template_details.to_yaml)
    end

    info "Added latest templates list to #{CONFIG_FILE}."
    info "Changes to this file (if any) should be committed to simple-server."
  end

  def massaged_template_details
    template_details.map do |template|
      template_name = template["Template_Name"]
      [
        template_name,
        template.slice(
          "Template_Id", "Template_Keys",
          "Non_Variable_Text_Length", "Max_Length_Permitted",
          "Template_Status", "Is_Unicode"
        )
      ]
    end.then { |hsh| add_version_info(hsh).sort_by(&:first).to_h }
  end

  def show_templates_pending_naming
    templates_pending_naming = template_details.select { |template_detail| template_detail["Template_Status"] == "0" }

    if templates_pending_naming.any?
      error "⚠️  These templates need to be named on bulksms.bsnl.in:"
      puts_list templates_pending_naming.map { |template_detail| template_detail["Template_Name"] }
    end
  end

  def notification_strings_summary
    uploaded_templates = []
    remaining_templates = []

    summary = locale_keys_by_language.map do |language, locale_keys|
      uploaded_for_language = 0
      locale_keys.each do |locale_key|
        if template_names.include?(locale_key)
          uploaded_templates << locale_key
          uploaded_for_language += 1
        else
          remaining_templates << locale_key
        end
      end

      {language: language,
       uploaded_count: uploaded_for_language,
       total_count: locale_keys.count}
    end

    info "✔ Found #{uploaded_templates.count}/#{locale_keys_by_language.values.flatten.count} templates on bulksms.bsnl.in:"
    puts_list(summary.sort_by { |item| item[:uploaded_count] }.reverse.map do |item|
      "#{item[:uploaded_count]}/#{item[:total_count]} uploaded from #{item[:language]}"
    end)

    info "✔ These messages have been uploaded to bulksms.bsnl.in:"
    puts_list uploaded_templates.sort

    error "˟ These messages have not been uploaded to bulksms.bsnl.in:"
    puts_list remaining_templates.sort

    show_templates_pending_naming
  end

  private

  def error(message)
    puts message.red
  end

  def warning(message)
    puts message.yellow
  end

  def info(message)
    puts message.green
  end

  def puts_list(array)
    puts array.to_yaml.delete_prefix("---\n")
  end

  def add_version_info(config)
    config.to_h do |template_name, template_detail|
      [template_name, template_detail.merge("Version" => Messaging::Bsnl::DltTemplate.version_number(template_name))]
    end.then { |hsh| add_latest_version_name(hsh) }
  end

  def add_latest_version_name(config)
    latest_versions = Hash.new(0)
    latest_version_names = {}

    config.each do |template_name, template_detail|
      version = template_detail["Version"]
      name_without_version = Messaging::Bsnl::DltTemplate.drop_version_number(template_name)

      if version >= latest_versions[name_without_version]
        latest_versions[name_without_version] = version
        latest_version_names[name_without_version] = template_name
      end
    end

    config.to_h do |template_name, template_detail|
      name_without_version = Messaging::Bsnl::DltTemplate.drop_version_number(template_name)
      [template_name,
        template_detail.merge(
          "Is_Latest_Version" => (template_detail["Version"] == latest_versions[name_without_version]),
          "Latest_Template_Version" => latest_version_names[name_without_version]
        )]
    end
  end

  def locale_keys_by_language
    Dir.glob("config/locales/notifications/*").to_h do |file_name|
      [file_name, flatten_translations(nil, YAML.safe_load(File.open(file_name)), nil, false).keys.map(&:to_s)]
    end
  end
end
